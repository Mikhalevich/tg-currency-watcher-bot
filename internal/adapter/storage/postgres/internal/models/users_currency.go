// Code generated by SQLBoiler 4.19.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsersCurrency is an object representing the database table.
type UsersCurrency struct {
	UserID     int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CurrencyID int       `boil:"currency_id" json:"currency_id" toml:"currency_id" yaml:"currency_id"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *usersCurrencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usersCurrencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsersCurrencyColumns = struct {
	UserID     string
	CurrencyID string
	UpdatedAt  string
}{
	UserID:     "user_id",
	CurrencyID: "currency_id",
	UpdatedAt:  "updated_at",
}

var UsersCurrencyTableColumns = struct {
	UserID     string
	CurrencyID string
	UpdatedAt  string
}{
	UserID:     "users_currency.user_id",
	CurrencyID: "users_currency.currency_id",
	UpdatedAt:  "users_currency.updated_at",
}

// Generated where

var UsersCurrencyWhere = struct {
	UserID     whereHelperint
	CurrencyID whereHelperint
	UpdatedAt  whereHelpertime_Time
}{
	UserID:     whereHelperint{field: "\"users_currency\".\"user_id\""},
	CurrencyID: whereHelperint{field: "\"users_currency\".\"currency_id\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"users_currency\".\"updated_at\""},
}

// UsersCurrencyRels is where relationship names are stored.
var UsersCurrencyRels = struct {
	Currency string
	User     string
}{
	Currency: "Currency",
	User:     "User",
}

// usersCurrencyR is where relationships are stored.
type usersCurrencyR struct {
	Currency *Currency `boil:"Currency" json:"Currency" toml:"Currency" yaml:"Currency"`
	User     *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*usersCurrencyR) NewStruct() *usersCurrencyR {
	return &usersCurrencyR{}
}

func (o *UsersCurrency) GetCurrency() *Currency {
	if o == nil {
		return nil
	}

	return o.R.GetCurrency()
}

func (r *usersCurrencyR) GetCurrency() *Currency {
	if r == nil {
		return nil
	}

	return r.Currency
}

func (o *UsersCurrency) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *usersCurrencyR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

// usersCurrencyL is where Load methods for each relationship are stored.
type usersCurrencyL struct{}

var (
	usersCurrencyAllColumns            = []string{"user_id", "currency_id", "updated_at"}
	usersCurrencyColumnsWithoutDefault = []string{"user_id", "currency_id", "updated_at"}
	usersCurrencyColumnsWithDefault    = []string{}
	usersCurrencyPrimaryKeyColumns     = []string{"user_id", "currency_id"}
	usersCurrencyGeneratedColumns      = []string{}
)

type (
	// UsersCurrencySlice is an alias for a slice of pointers to UsersCurrency.
	// This should almost always be used instead of []UsersCurrency.
	UsersCurrencySlice []*UsersCurrency
	// UsersCurrencyHook is the signature for custom UsersCurrency hook methods
	UsersCurrencyHook func(context.Context, boil.ContextExecutor, *UsersCurrency) error

	usersCurrencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usersCurrencyType                 = reflect.TypeOf(&UsersCurrency{})
	usersCurrencyMapping              = queries.MakeStructMapping(usersCurrencyType)
	usersCurrencyPrimaryKeyMapping, _ = queries.BindMapping(usersCurrencyType, usersCurrencyMapping, usersCurrencyPrimaryKeyColumns)
	usersCurrencyInsertCacheMut       sync.RWMutex
	usersCurrencyInsertCache          = make(map[string]insertCache)
	usersCurrencyUpdateCacheMut       sync.RWMutex
	usersCurrencyUpdateCache          = make(map[string]updateCache)
	usersCurrencyUpsertCacheMut       sync.RWMutex
	usersCurrencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usersCurrencyAfterSelectMu sync.Mutex
var usersCurrencyAfterSelectHooks []UsersCurrencyHook

var usersCurrencyBeforeInsertMu sync.Mutex
var usersCurrencyBeforeInsertHooks []UsersCurrencyHook
var usersCurrencyAfterInsertMu sync.Mutex
var usersCurrencyAfterInsertHooks []UsersCurrencyHook

var usersCurrencyBeforeUpdateMu sync.Mutex
var usersCurrencyBeforeUpdateHooks []UsersCurrencyHook
var usersCurrencyAfterUpdateMu sync.Mutex
var usersCurrencyAfterUpdateHooks []UsersCurrencyHook

var usersCurrencyBeforeDeleteMu sync.Mutex
var usersCurrencyBeforeDeleteHooks []UsersCurrencyHook
var usersCurrencyAfterDeleteMu sync.Mutex
var usersCurrencyAfterDeleteHooks []UsersCurrencyHook

var usersCurrencyBeforeUpsertMu sync.Mutex
var usersCurrencyBeforeUpsertHooks []UsersCurrencyHook
var usersCurrencyAfterUpsertMu sync.Mutex
var usersCurrencyAfterUpsertHooks []UsersCurrencyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsersCurrency) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCurrencyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsersCurrency) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCurrencyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsersCurrency) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCurrencyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsersCurrency) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCurrencyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsersCurrency) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCurrencyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsersCurrency) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCurrencyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsersCurrency) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCurrencyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsersCurrency) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCurrencyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsersCurrency) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCurrencyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsersCurrencyHook registers your hook function for all future operations.
func AddUsersCurrencyHook(hookPoint boil.HookPoint, usersCurrencyHook UsersCurrencyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usersCurrencyAfterSelectMu.Lock()
		usersCurrencyAfterSelectHooks = append(usersCurrencyAfterSelectHooks, usersCurrencyHook)
		usersCurrencyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		usersCurrencyBeforeInsertMu.Lock()
		usersCurrencyBeforeInsertHooks = append(usersCurrencyBeforeInsertHooks, usersCurrencyHook)
		usersCurrencyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		usersCurrencyAfterInsertMu.Lock()
		usersCurrencyAfterInsertHooks = append(usersCurrencyAfterInsertHooks, usersCurrencyHook)
		usersCurrencyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		usersCurrencyBeforeUpdateMu.Lock()
		usersCurrencyBeforeUpdateHooks = append(usersCurrencyBeforeUpdateHooks, usersCurrencyHook)
		usersCurrencyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		usersCurrencyAfterUpdateMu.Lock()
		usersCurrencyAfterUpdateHooks = append(usersCurrencyAfterUpdateHooks, usersCurrencyHook)
		usersCurrencyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		usersCurrencyBeforeDeleteMu.Lock()
		usersCurrencyBeforeDeleteHooks = append(usersCurrencyBeforeDeleteHooks, usersCurrencyHook)
		usersCurrencyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		usersCurrencyAfterDeleteMu.Lock()
		usersCurrencyAfterDeleteHooks = append(usersCurrencyAfterDeleteHooks, usersCurrencyHook)
		usersCurrencyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		usersCurrencyBeforeUpsertMu.Lock()
		usersCurrencyBeforeUpsertHooks = append(usersCurrencyBeforeUpsertHooks, usersCurrencyHook)
		usersCurrencyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		usersCurrencyAfterUpsertMu.Lock()
		usersCurrencyAfterUpsertHooks = append(usersCurrencyAfterUpsertHooks, usersCurrencyHook)
		usersCurrencyAfterUpsertMu.Unlock()
	}
}

// One returns a single usersCurrency record from the query.
func (q usersCurrencyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsersCurrency, error) {
	o := &UsersCurrency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for users_currency")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsersCurrency records from the query.
func (q usersCurrencyQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsersCurrencySlice, error) {
	var o []*UsersCurrency

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsersCurrency slice")
	}

	if len(usersCurrencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsersCurrency records in the query.
func (q usersCurrencyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count users_currency rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usersCurrencyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if users_currency exists")
	}

	return count > 0, nil
}

// Currency pointed to by the foreign key.
func (o *UsersCurrency) Currency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CurrencyID),
	}

	queryMods = append(queryMods, mods...)

	return Currencies(queryMods...)
}

// User pointed to by the foreign key.
func (o *UsersCurrency) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usersCurrencyL) LoadCurrency(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersCurrency interface{}, mods queries.Applicator) error {
	var slice []*UsersCurrency
	var object *UsersCurrency

	if singular {
		var ok bool
		object, ok = maybeUsersCurrency.(*UsersCurrency)
		if !ok {
			object = new(UsersCurrency)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersCurrency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersCurrency))
			}
		}
	} else {
		s, ok := maybeUsersCurrency.(*[]*UsersCurrency)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersCurrency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersCurrency))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersCurrencyR{}
		}
		args[object.CurrencyID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersCurrencyR{}
			}

			args[obj.CurrencyID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`currency`),
		qm.WhereIn(`currency.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency")
	}

	if len(currencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Currency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.UsersCurrencies = append(foreign.R.UsersCurrencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CurrencyID == foreign.ID {
				local.R.Currency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.UsersCurrencies = append(foreign.R.UsersCurrencies, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usersCurrencyL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersCurrency interface{}, mods queries.Applicator) error {
	var slice []*UsersCurrency
	var object *UsersCurrency

	if singular {
		var ok bool
		object, ok = maybeUsersCurrency.(*UsersCurrency)
		if !ok {
			object = new(UsersCurrency)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersCurrency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersCurrency))
			}
		}
	} else {
		s, ok := maybeUsersCurrency.(*[]*UsersCurrency)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersCurrency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersCurrency))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersCurrencyR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersCurrencyR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UsersCurrencies = append(foreign.R.UsersCurrencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UsersCurrencies = append(foreign.R.UsersCurrencies, local)
				break
			}
		}
	}

	return nil
}

// SetCurrency of the usersCurrency to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.UsersCurrencies.
func (o *UsersCurrency) SetCurrency(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, usersCurrencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.CurrencyID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CurrencyID = related.ID
	if o.R == nil {
		o.R = &usersCurrencyR{
			Currency: related,
		}
	} else {
		o.R.Currency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			UsersCurrencies: UsersCurrencySlice{o},
		}
	} else {
		related.R.UsersCurrencies = append(related.R.UsersCurrencies, o)
	}

	return nil
}

// SetUser of the usersCurrency to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UsersCurrencies.
func (o *UsersCurrency) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, usersCurrencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.CurrencyID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &usersCurrencyR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UsersCurrencies: UsersCurrencySlice{o},
		}
	} else {
		related.R.UsersCurrencies = append(related.R.UsersCurrencies, o)
	}

	return nil
}

// UsersCurrencies retrieves all the records using an executor.
func UsersCurrencies(mods ...qm.QueryMod) usersCurrencyQuery {
	mods = append(mods, qm.From("\"users_currency\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users_currency\".*"})
	}

	return usersCurrencyQuery{q}
}

// FindUsersCurrency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsersCurrency(ctx context.Context, exec boil.ContextExecutor, userID int, currencyID int, selectCols ...string) (*UsersCurrency, error) {
	usersCurrencyObj := &UsersCurrency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users_currency\" where \"user_id\"=$1 AND \"currency_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, currencyID)

	err := q.Bind(ctx, exec, usersCurrencyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from users_currency")
	}

	if err = usersCurrencyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usersCurrencyObj, err
	}

	return usersCurrencyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsersCurrency) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no users_currency provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersCurrencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usersCurrencyInsertCacheMut.RLock()
	cache, cached := usersCurrencyInsertCache[key]
	usersCurrencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usersCurrencyAllColumns,
			usersCurrencyColumnsWithDefault,
			usersCurrencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usersCurrencyType, usersCurrencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usersCurrencyType, usersCurrencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users_currency\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users_currency\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into users_currency")
	}

	if !cached {
		usersCurrencyInsertCacheMut.Lock()
		usersCurrencyInsertCache[key] = cache
		usersCurrencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsersCurrency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsersCurrency) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usersCurrencyUpdateCacheMut.RLock()
	cache, cached := usersCurrencyUpdateCache[key]
	usersCurrencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usersCurrencyAllColumns,
			usersCurrencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update users_currency, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users_currency\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usersCurrencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usersCurrencyType, usersCurrencyMapping, append(wl, usersCurrencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update users_currency row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for users_currency")
	}

	if !cached {
		usersCurrencyUpdateCacheMut.Lock()
		usersCurrencyUpdateCache[key] = cache
		usersCurrencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usersCurrencyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for users_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for users_currency")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsersCurrencySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usersCurrencyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usersCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usersCurrency")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsersCurrency) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no users_currency provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersCurrencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usersCurrencyUpsertCacheMut.RLock()
	cache, cached := usersCurrencyUpsertCache[key]
	usersCurrencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			usersCurrencyAllColumns,
			usersCurrencyColumnsWithDefault,
			usersCurrencyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usersCurrencyAllColumns,
			usersCurrencyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert users_currency, could not build update column list")
		}

		ret := strmangle.SetComplement(usersCurrencyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(usersCurrencyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert users_currency, could not build conflict column list")
			}

			conflict = make([]string, len(usersCurrencyPrimaryKeyColumns))
			copy(conflict, usersCurrencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users_currency\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(usersCurrencyType, usersCurrencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usersCurrencyType, usersCurrencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert users_currency")
	}

	if !cached {
		usersCurrencyUpsertCacheMut.Lock()
		usersCurrencyUpsertCache[key] = cache
		usersCurrencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsersCurrency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsersCurrency) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsersCurrency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usersCurrencyPrimaryKeyMapping)
	sql := "DELETE FROM \"users_currency\" WHERE \"user_id\"=$1 AND \"currency_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from users_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for users_currency")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usersCurrencyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usersCurrencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from users_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users_currency")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsersCurrencySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usersCurrencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users_currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersCurrencyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usersCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users_currency")
	}

	if len(usersCurrencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsersCurrency) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsersCurrency(ctx, exec, o.UserID, o.CurrencyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsersCurrencySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsersCurrencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users_currency\".* FROM \"users_currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersCurrencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsersCurrencySlice")
	}

	*o = slice

	return nil
}

// UsersCurrencyExists checks if the UsersCurrency row exists.
func UsersCurrencyExists(ctx context.Context, exec boil.ContextExecutor, userID int, currencyID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users_currency\" where \"user_id\"=$1 AND \"currency_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, currencyID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, currencyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if users_currency exists")
	}

	return exists, nil
}

// Exists checks if the UsersCurrency row exists.
func (o *UsersCurrency) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UsersCurrencyExists(ctx, exec, o.UserID, o.CurrencyID)
}
